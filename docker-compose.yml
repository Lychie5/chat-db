# ================================================
# 🐳 Docker Compose - Configuration Multi-Services
# ================================================

version: '3.8'

services:
  # ==========================================
  # 📦 PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: chat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpassword
      POSTGRES_DB: chat_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema-postgresql.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chat_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # 🚀 Backend Node.js (Express + Socket.IO)
  # ==========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Configuration PostgreSQL
      DATABASE_URL: postgresql://chatuser:chatpassword@postgres:5432/chat_db
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: chatuser
      DB_PASSWORD: chatpassword
      DB_NAME: chat_db
      DB_CONN_LIMIT: 10
      
      # Configuration serveur
      NODE_ENV: development
      PORT: 8080
      CORS_ORIGIN: "*"
      
      # Options de maintenance
      ALLOW_MIGRATE: "false"
      ALLOW_ADMIN: "false"
    ports:
      - "8080:8080"
    networks:
      - chat-network
    volumes:
      # Pour le développement (hot reload)
      - ./public:/app/public
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # 📊 pgAdmin (Interface Web PostgreSQL)
  # ==========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chat-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chatapp.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - chat-network
    depends_on:
      - postgres

# ==========================================
# 📂 Volumes persistants
# ==========================================
volumes:
  postgres_data:
    driver: local

# ==========================================
# 🌐 Réseaux
# ==========================================
networks:
  chat-network:
    driver: bridge
