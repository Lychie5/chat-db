workflows:
  expo-android-build:
    name: Expo Android Build
    max_build_duration: 120
    instance_type: linux_x2
    working_directory: chat-db-mobile
    environment:
      android_signing:
        - keystore_reference
      groups:
        - expo_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
      node: 18.17.0
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
      - name: Prebuild Expo (generate native code)
        script: |
          npx expo prebuild --platform android --clean
      - name: Set Android SDK location
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android APK
        script: |
          cd android
          ./gradlew assembleRelease --no-daemon
    artifacts:
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true

  expo-ios-build:
    name: Expo iOS Build (Development)
    max_build_duration: 120
    instance_type: mac_mini_m1
    working_directory: chat-db-mobile
    environment:
      groups:
        - apple_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
        BUNDLE_ID: "com.lychie5.meomobile"
      node: 18.17.0
      xcode: 15.2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
      - name: Remove Push Notifications from app.json
        script: |
          # Remove expo-notifications plugin to avoid Push Notifications capability
          node -e "
          const fs = require('fs');
          const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          
          // Remove notification-related plugins
          if (appJson.expo && appJson.expo.plugins) {
            appJson.expo.plugins = appJson.expo.plugins.filter(plugin => {
              if (typeof plugin === 'string') {
                return !plugin.includes('notification');
              }
              if (Array.isArray(plugin)) {
                return !plugin[0].includes('notification');
              }
              return true;
            });
          }
          
          // Remove ios.infoPlist notification permissions
          if (appJson.expo && appJson.expo.ios && appJson.expo.ios.infoPlist) {
            delete appJson.expo.ios.infoPlist['UIBackgroundModes'];
          }
          
          fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
          console.log('Removed Push Notifications from app.json');
          "
      - name: Prebuild Expo (generate native code)
        script: |
          npx expo prebuild --platform ios --clean
      - name: Detect Xcode project
        script: |
          cd ios
          XCODE_PROJECT=$(ls -d *.xcodeproj | head -n 1 | sed 's/\.xcodeproj$//')
          XCODE_WORKSPACE=$(ls -d *.xcworkspace | head -n 1 | sed 's/\.xcworkspace$//')
          echo "XCODE_PROJECT=$XCODE_PROJECT" >> $CM_ENV
          echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> $CM_ENV
          echo "Detected project: $XCODE_PROJECT"
          echo "Detected workspace: $XCODE_WORKSPACE"
          cd ..
      - name: Remove Push Notifications entitlements
        script: |
          # Remove any entitlements file to avoid Push Notifications requirement
          find ios -name "*.entitlements" -type f -delete
          echo "Removed all entitlements files"
      - name: Set up provisioning profiles
        script: |
          echo "=== Setting up code signing ==="
          echo "Bundle ID: $BUNDLE_ID"
          echo "Apple ID: $APPLE_ID"
          
          # Set environment variables for app-store-connect CLI
          export APP_STORE_CONNECT_PRIVATE_KEY="$APPLE_ID"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_SPECIFIC_PASSWORD"
          
          # Initialize keychain for code signing
          keychain initialize
          
          # Fetch or create provisioning profile
          echo "Fetching signing files for $BUNDLE_ID..."
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_DEVELOPMENT \
            --create || {
              echo "=== Error: Failed to fetch signing files ==="
              echo "This is expected with free Apple Developer account"
              echo "We'll create a manual provisioning profile instead"
            }
          
          # List provisioning profiles
          echo "=== Provisioning profiles in keychain ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ 2>/dev/null || echo "No profiles found yet"
          
          # Add any certificates to keychain
          echo "Adding certificates to keychain..."
          keychain add-certificates 2>/dev/null || echo "No certificates to add"
          
          # Configure Xcode project to use fetched profiles
          echo "Configuring Xcode project..."
          xcode-project use-profiles 2>/dev/null || echo "No profiles to configure"
      - name: Set manual code signing
        script: |
          # Force manual code signing to avoid automatic entitlements
          cd ios
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' "$XCODE_PROJECT.xcodeproj/project.pbxproj"
          sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' "$XCODE_PROJECT.xcodeproj/project.pbxproj"
          # Remove any reference to entitlements
          sed -i '' '/CODE_SIGN_ENTITLEMENTS/d' "$XCODE_PROJECT.xcodeproj/project.pbxproj"
          cd ..
      - name: Build iOS app
        script: |
          cd ios
          
          echo "=== Building iOS app with automatic signing ==="
          
          # Use automatic signing since manual provisioning is failing
          # This works with free Apple Developer account
          xcodebuild clean build \
            -project "$XCODE_PROJECT.xcodeproj" \
            -scheme "$XCODE_PROJECT" \
            -configuration Release \
            -sdk iphoneos \
            -destination generic/platform=iOS \
            -derivedDataPath build \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="iPhone Developer" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$APPLE_ID" \
            ONLY_ACTIVE_ARCH=NO || {
              echo "=== Build failed with automatic signing ==="
              echo "Trying with code signing disabled for IPA creation..."
              
              # Build without signing (for creating IPA structure)
              xcodebuild clean build \
                -project "$XCODE_PROJECT.xcodeproj" \
                -scheme "$XCODE_PROJECT" \
                -configuration Release \
                -sdk iphoneos \
                -destination generic/platform=iOS \
                -derivedDataPath build \
                CODE_SIGNING_ALLOWED=NO \
                CODE_SIGNING_REQUIRED=NO \
                ONLY_ACTIVE_ARCH=NO
            }
          
          # Create properly structured IPA
          cd ..
          APP_PATH="ios/build/Build/Products/Release-iphoneos/$XCODE_PROJECT.app"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App bundle not found at $APP_PATH"
            echo "Searching for .app bundles:"
            find ios/build -name "*.app" -type d
            exit 1
          fi
          
          echo "Found app bundle: $APP_PATH"
          
          # Create Payload directory (MUST be capital P)
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          
          # Verify structure
          echo "=== IPA Structure ==="
          ls -la Payload/
          
          # Create IPA with proper structure
          # Important: zip from current directory, not from inside Payload
          zip -r -q "$XCODE_PROJECT.ipa" Payload
          rm -rf Payload
          
          echo "IPA created successfully: $XCODE_PROJECT.ipa"
          ls -lh "$XCODE_PROJECT.ipa"
          
          # Verify IPA contents
          echo "=== IPA Contents ==="
          unzip -l "$XCODE_PROJECT.ipa" | head -20
    artifacts:
      - "*.ipa"
      - ios/build/Release-iphoneos/*.app
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true
