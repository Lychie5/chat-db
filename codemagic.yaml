workflows:
  expo-android-build:
    name: Expo Android Build
    max_build_duration: 120
    instance_type: linux_x2
    working_directory: chat-db-mobile
    environment:
      android_signing:
        - keystore_reference
      groups:
        - expo_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
      node: 18.17.0
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
      - name: Prebuild Expo (generate native code)
        script: |
          npx expo prebuild --platform android --clean
      - name: Set Android SDK location
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android APK
        script: |
          cd android
          ./gradlew assembleRelease --no-daemon
    artifacts:
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true

  expo-ios-build:
    name: Expo iOS Build (Development)
    max_build_duration: 120
    instance_type: mac_mini_m1
    working_directory: chat-db-mobile
    environment:
      groups:
        - apple_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
        BUNDLE_ID: "com.lychie5.meomobile"
      node: 18.17.0
      xcode: 15.2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
      - name: Prebuild Expo (generate native code)
        script: |
          npx expo prebuild --platform ios --clean
      - name: Detect Xcode project
        script: |
          cd ios
          XCODE_PROJECT=$(ls -d *.xcodeproj | head -n 1 | sed 's/\.xcodeproj$//')
          XCODE_WORKSPACE=$(ls -d *.xcworkspace | head -n 1 | sed 's/\.xcworkspace$//')
          echo "XCODE_PROJECT=$XCODE_PROJECT" >> $CM_ENV
          echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> $CM_ENV
          echo "Detected project: $XCODE_PROJECT"
          echo "Detected workspace: $XCODE_WORKSPACE"
          cd ..
      - name: Disable Push Notifications capability
        script: |
          # Remove Push Notifications from entitlements to avoid provisioning issues
          ENTITLEMENTS_FILE="ios/$XCODE_PROJECT/$XCODE_PROJECT.entitlements"
          if [ -f "$ENTITLEMENTS_FILE" ]; then
            /usr/libexec/PlistBuddy -c "Delete :aps-environment" "$ENTITLEMENTS_FILE" 2>/dev/null || true
            echo "Removed Push Notifications from entitlements"
          fi
          
          # Disable Push Notifications in Xcode project
          ruby -e "
          require 'xcodeproj'
          project_path = 'ios/$XCODE_PROJECT.xcodeproj'
          project = Xcodeproj::Project.open(project_path)
          project.targets.each do |target|
            if target.name == ENV['XCODE_PROJECT']
              target.build_configurations.each do |config|
                config.build_settings.delete('CODE_SIGN_ENTITLEMENTS')
              end
            end
          end
          project.save
          puts 'Disabled Push Notifications capability'
          "
      - name: Set up provisioning profiles
        script: |
          # Initialize keychain for code signing
          keychain initialize
          
          # Fetch or create provisioning profile using Apple ID
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_DEVELOPMENT \
            --create \
            --apple-id "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD"
          
          # Add certificates to keychain
          keychain add-certificates
          
          # Configure Xcode project to use fetched profiles
          xcode-project use-profiles
      - name: Build iOS app
        script: |
          if [ -n "$XCODE_WORKSPACE" ]; then
            xcode-project build-ipa \
              --workspace "ios/$XCODE_WORKSPACE.xcworkspace" \
              --scheme "$XCODE_PROJECT"
          else
            xcode-project build-ipa \
              --project "ios/$XCODE_PROJECT.xcodeproj" \
              --scheme "$XCODE_PROJECT"
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true
