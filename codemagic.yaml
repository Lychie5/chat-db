workflows:
  expo-android-build:
    name: Expo Android Build
    max_build_duration: 120
    instance_type: linux_x2
    working_directory: chat-db-mobile
    environment:
      android_signing:
        - keystore_reference
      groups:
        - expo_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
      node: 18.17.0
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
      - name: Prebuild Expo (generate native code)
        script: |
          npx expo prebuild --platform android --clean
      - name: Set Android SDK location
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android APK
        script: |
          cd android
          ./gradlew assembleRelease --no-daemon
    artifacts:
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true

  expo-ios-build:
    name: Expo iOS Build for AltStore
    max_build_duration: 120
    instance_type: mac_mini_m1
    working_directory: chat-db-mobile
    environment:
      groups:
        - apple_credentials
      vars:
        EXPO_PUBLIC_API_URL: "https://meo-mv5n.onrender.com"
        BUNDLE_ID: "com.lychie5.meomobile"
      node: 18.17.0
      xcode: 16.1
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install dependencies
        script: |
          npm install --legacy-peer-deps
      - name: Install Expo CLI and fastlane
        script: |
          npm install -g @expo/ngrok@^4.1.0
          npm install -g expo-cli
          gem install fastlane
      - name: Remove Push Notifications
        script: |
          node <<'EOF'
          const fs = require('fs');
          const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          
          if (appJson.expo?.plugins) {
            appJson.expo.plugins = appJson.expo.plugins.filter(plugin => {
              const name = typeof plugin === 'string' ? plugin : plugin[0];
              return !name.includes('notification');
            });
          }
          
          if (appJson.expo?.ios?.infoPlist) {
            delete appJson.expo.ios.infoPlist.UIBackgroundModes;
          }
          
          fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
          console.log('✓ Cleaned app.json');
          EOF
      - name: Prebuild Expo
        script: |
          npx expo prebuild --platform ios --clean
      - name: Detect project name
        script: |
          cd ios
          PROJECT=$(ls -d *.xcodeproj | head -n 1 | sed 's/\.xcodeproj$//')
          echo "XCODE_PROJECT=$PROJECT" >> $CM_ENV
          echo "✓ Project: $PROJECT"
          cd ..
      - name: Clean entitlements
        script: |
          find ios -name "*.entitlements" -delete
          echo "✓ Removed entitlements"
      - name: Check Podfile
        script: |
          cd ios
          echo "=== Checking Podfile ==="
          if [ -f "Podfile" ]; then
            echo "✓ Podfile exists"
            cat Podfile
          else
            echo "✗ Podfile NOT found!"
          fi
          cd ..
      - name: Install CocoaPods dependencies
        script: |
          cd ios
          
          # Add post_install hook to disable code signing for pods (single line)
          echo "" >> Podfile
          echo "post_install do |installer|" >> Podfile
          echo "  installer.pods_project.targets.each do |target|" >> Podfile
          echo "    target.build_configurations.each do |config|" >> Podfile
          echo "      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'" >> Podfile
          echo "      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'" >> Podfile
          echo "      config.build_settings['CODE_SIGN_IDENTITY'] = ''" >> Podfile
          echo "    end" >> Podfile
          echo "  end" >> Podfile
          echo "end" >> Podfile
          
          echo "=== Installing pods ==="
          pod install
          echo "=== Checking workspace ==="
          ls -la *.xcworkspace || echo "✗ No workspace found"
          ls -la
          cd ..
          echo "✓ Pods installed with signing disabled"
      - name: Bundle JavaScript manually
        script: |
          # Install React Native CLI tools
          npm install --save-dev @react-native-community/cli-platform-ios
          
          echo "=== Attempting to bundle JS ==="
          
          # Try with react-native CLI
          if node_modules/.bin/react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output ios/main.jsbundle \
            --assets-dest ios 2>&1; then
            echo "✓ react-native bundle succeeded"
            ls -lh ios/main.jsbundle
          else
            echo "⚠ react-native bundle failed, trying alternative..."
            
            # Alternative: use node directly with metro
            node -e "
              const Metro = require('metro');
              const fs = require('fs');
              const path = require('path');
              
              Metro.runBuild({
                entry: 'index.js',
                out: 'ios/main.jsbundle',
                platform: 'ios',
                minify: true,
                dev: false
              }).catch(console.error);
            " || echo "Metro bundling also failed"
          fi
          
          # Check what we have
          echo "=== Bundle status ==="
          ls -lh ios/ | grep -E "main.jsbundle|assets" || echo "No bundle files found"
      - name: Build unsigned IPA
        script: |
          cd ios
          
          echo "=== Building app ==="
          # Build with all signing disabled at build command level
          xcodebuild clean build \
            -workspace "$XCODE_PROJECT.xcworkspace" \
            -scheme "$XCODE_PROJECT" \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath ../build \
            ONLY_ACTIVE_ARCH=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=NO
          
          cd ..
          
          # Find .app bundle
          APP=$(find build/Build/Products/Release-iphoneos -name "*.app" -type d | head -n 1)
          
          if [ -z "$APP" ]; then
            echo "✗ App bundle not found"
            exit 1
          fi
          
          echo "✓ App: $APP"
          
          echo "=== App size before injection ==="
          du -sh "$APP/"
          ls -lh "$APP/"
          
          # Inject JS bundle into app
          echo "=== Injecting JS bundle ==="
          if [ -f "ios/main.jsbundle" ]; then
            BUNDLE_SIZE=$(ls -lh ios/main.jsbundle | awk '{print $5}')
            echo "Found main.jsbundle: $BUNDLE_SIZE"
            cp ios/main.jsbundle "$APP/"
            echo "✓ main.jsbundle copied"
          else
            echo "✗ main.jsbundle not found!"
            echo "Searching for any bundle files:"
            find ios -name "*.jsbundle" -o -name "main.js" -o -name "index.ios.bundle"
          fi
          
          # Copy all assets from ios/ to app
          echo "=== Copying assets ==="
          find ios -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.ttf" -o -name "*.otf" \) -exec cp {} "$APP/" \; 2>/dev/null || true
          
          echo "=== App size after injection ==="
          du -sh "$APP/"
          ls -lh "$APP/" | head -20
          
          # Check if bundle is in app
          if [ -f "$APP/main.jsbundle" ]; then
            INJECTED_SIZE=$(ls -lh "$APP/main.jsbundle" | awk '{print $5}')
            echo "✓ Bundle in app: $INJECTED_SIZE"
          else
            echo "✗ Bundle NOT in app after injection!"
          fi
          
          # Ensure Info.plist is valid
          if [ ! -f "$APP/Info.plist" ]; then
            echo "✗ Missing Info.plist"
            exit 1
          fi
          
          # Read bundle ID from Info.plist
          BUNDLE=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" "$APP/Info.plist" 2>/dev/null || echo "com.lychie5.meomobile")
          echo "✓ Bundle ID: $BUNDLE"
          
          # Create IPA structure
          rm -rf Payload
          mkdir Payload
          cp -R "$APP" Payload/
          
          # Create IPA (use -r for recursive, -y for symlinks)
          zip -qr meomobile.ipa Payload
          
          # Move to artifacts
          mv meomobile.ipa build/
          rm -rf Payload
          
          # Validate IPA
          if [ -f "build/meomobile.ipa" ]; then
            echo "✓ IPA created: $(ls -lh build/meomobile.ipa | awk '{print $5}')"
            
            # Quick check
            unzip -l build/meomobile.ipa | grep -q "Payload/.*\.app/Info.plist" && echo "✓ Valid structure" || echo "✗ Invalid structure"
          else
            echo "✗ IPA creation failed"
            exit 1
          fi
    artifacts:
      - build/meomobile.ipa
    publishing:
      email:
        recipients:
          - mehau5lucas@gmail.com
        notify:
          success: true
          failure: true
